总结问题：

1. 在APP.vue 里面用了

包裹动态组件时，会缓存不活动的组件实例，而不是销毁它们

<keep-alive>

    <router-view v-if="$route.meta.keepAlive"></router-view>

</keep-alive>

<router-view v-if="!$route.meta.keepAlive"></router-view>

在router.js里面用了

export default new Router({

  routes: [

    {

      path: '/',

      name: 'Hello',

      component: Hello,

      meta: {

        keepAlive: false // 不需要缓存

      }

    },

    {

      path: '/page1',

      name: 'Page1',

      component: Page1,

      meta: {

        keepAlive: true // 需要被缓存

      }

    }

  ]

})



2. 在main.js里面用了

就是直接引入就可以了

import FastClick from 'fastclick'

 原理: 在检测到touchend事件的时候，会通过DOM自定义事件立即出发模拟一个click事件，

并把浏览器在300ms之后真正的click事件阻止掉

  缺点: 脚本相对较大

没使用jquery得时候

if ('addEventListener' in document) {

    document.addEventListener('DOMContentLoaded', function() {

        FastClick.attach(document.body);

    }, false);

}



在vue中使用????```js? 

??// 安装? ? npm install fastclick -S?

? // 引入? ? import FastClick from 'fastclick'? 

? // 使用? ? FastClick.attach(document.body);? ?



为啥要使用  

移动设备上的浏览器默认会在用户点击屏幕大约延迟300毫秒后才会触发点击事件，

这是为了检查用户是否在做双击。为了能够立即响应用户的点击事件，才有了FastClick。



3.mapMutations这个是vuex里面得

  ...mapMutations([

                'RECORD_USERINFO',

            ]),

你可以在组件中使用 this.$store.commit('xxx') 提交 mutation，

或者使用 mapMutations 辅助函数将组件中的 methods 映射为 store.commit 调用（需要在根节点注入 store）。





4.Fetch发送数据

使用Fetch发送也很简单，只需要配置三个参数。

fetch('some-url', options);

第一个参数是设置请求方法（如post、put或del），Fetch会自动设置方法为get。



第二个参数是设置头部。因为一般使用JSON数据格式，所以设置ContentType为application/json。



第三个参数是设置包含JSON内容的主体。因为JSON内容是必须的，所以当设置主体时会调用JSON.stringify。

Fetch处理异常

虽然希望Ajax响应成功，但是仍会有问题出现：



可能尝试获取不存在的资源

a没有权限获取资源

b输入参数有误

c服务器抛出异常

d服务器超时

e服务器崩溃

API更改



5.Ajax请求中的async:false/true的作用

async. 默认是true，即为异步方式，$.Ajax执行后，会继续执行ajax后面的脚本，

直到服务器端返回数据后，触发$.Ajax里的success方法，这时候执行的是两个线程。

若要将其设置为false，则所有的请求均为同步请求，在没有返回值之前，同步请求将锁住浏览器

用户其它操作必须等待请求完成才可以执行。

async其实是ES7的才有的关键字 就是异步得意思

async function helloAsync(){

    return "helloAsync";

  }

  console.log(helloAsync())//Promise {<resolved>: "helloAsync"}

申明async方法比较简单，只需要在普通的函数前加上"async"关键字即可。

我们执行下这个函数，发现并没有返回字符串"helloAsync",

而是通过Promise.resolved()将字符串封装成了一个Promise对象返回。

?

 ?既然是返回的Promise对象，我们就是用then方法来处理。

async function helloAsync(){

 

  	return "helloAsync";

 

  }

  helloAsync().then(v=>{

     console.log(v);//"helloAsync"

  })





6.xlink:href属性像参考<IRI>一样定义到了资源的链接

xlink:href属性是可以动画的



7.svg

使用 <embed> 标签

<embed src="circle1.svg" type="image/svg+xml" />

使用 <object> 标签

<object data="circle1.svg" type="image/svg+xml"></object>

使用 <iframe> 标签

<iframe src="circle1.svg"></iframe>



直接在HTML嵌入SVG代码


在Firefox、Internet Explorer9、谷歌Chrome和Safari中，你可以直接在HTML嵌入SVG代码。

<svg xmlns="http://www.w3.org/2000/svg" version="1.1">

   <circle cx="100" cy="50" r="40" stroke="black" stroke-width="2" fill="red" />

</svg>

链接到SVG文件

您还可以用<a>标签链接到一个SVG文件：链接到SVG文件



您还可以用<a>标签链接到一个SVG文件：<a href="circle1.svg">View SVG file</a>

8.await使用中的阻塞和并发
好处：
1.不会阻塞UI线程。一旦UI线程不能及时响应，会极大的影响用户体验，这点在手机和平板的APP上尤为重要。

2.代码简洁。

相对基于event的异步方式，在多次回调的情况下（比如需要多次调web service，且后续调用基于前次调用的结果）特别明显。可以将多个+=Completed方法合并到一起。

相对于Begin/End的异步方式，避免了N重且不能对齐的大括号。

作用很简单，仅仅是起到延迟的作用

  Console.WriteLine(DateTime.Now);

 

            new Action(async () =>

            {

                await Delay3000Async();

                await Delay2000Async();

                await Delay1000Async();

            })();        
9.vue中mixin的一点理解

　vue中提供了一种混合机制--mixins，用来更高效的实现组件内容的复用

mixins和普通情况下引入组件有什么区别

 组件在引用之后相当于在父组件内开辟了一块单独的空间，来根据父组件props过来的值进行相应的操作，

单本质上两者还是泾渭分明，相对独立。

     而mixins则是在引入组件之后，则是将组件内部的内容如data等方法、method等属性与父组件相应内容进行合并

。相当于在引入后，父组件的各种属性方法都被扩充了。

     单纯组件引用：

          父组件 + 子组件 >>> 父组件 + 子组件

     mixins：

          父组件 + 子组件 >>> new父组件

值得注意的是，在使用mixins时，父组件和子组件同时拥有着子组件内的各种属性方法，

但这并不意味着他们同时共享、同时处理这些变量，两者之间除了合并，是不会进行任何通信的

10.1.什么是require.js?



1)：require.js是一个js脚本加载器，它遵循AMD(Asynchronous Module Definition)规范，实现js脚本的异步加载，

不阻塞页面的渲染和其后的脚本的执行，并提供了在加载完成之后的执行相应回调函数的功能；



2)：require.js要求js脚本必须要实现模块化，即文件化；而require.js的作用之一就是加载js模块，也就是js文件。



3)：require.js可以管理js模块/文件之间的依赖;即不同的框架例如Jquery，AngularJs等采用了不同的语法，

而使用这些语法的js文件在导入时必须排在Jquery.js或Angular.js之后才能顺利执行，require.js则能够解决排序依赖问题。



4) : RequireJS 是一个JavaScript模块加载器。它非常适合在浏览器中使用，但它也可以用在其他脚本环境，

就像 Rhino and Node。使用RequireJS加载模块化脚本将提高代码的加载速度和质量。

2.为什么要使用require.js？



<!DOCTYPE html>

<html>

  <head>

    <script type="text/javascript" src="a.js"></script>

  </head>

  <body>

   <span>Hellow World</span>

  </body>

</html>

以上代码，会先加载head中引入的js文件及js文件中的脚本函数，再渲染body中的内容

这就是JS阻塞浏览器渲染导致的结果。加载文件越多，网页失去响应的时间就会越长。

由于js文件之间存在依赖关系，因此必须严格保证加载顺序，依赖性最大的模块一定要放到最后加载，

当依赖关系很复杂的时候，代码的编写和维护都会变得困难。

3.require.js的诞生就是为了解决上面所说的两个问题：



1）.实现js文件的异步加载，避免网页失去响应；



2）.管理模块之间的依赖性，便于代码的编写和维护。



require()函数接受两个参数。第一个参数是一个数组，表示所依赖的框架，上例就是['A', 'B', 'C']，

即main.js里的代码需要用到这三个模块；第二个参数是一个回调函数，

当前面指定的模块都加载成功后，它将被调用。加载的模块会以参数形式传入该函数，

从而在回调函数内部就可以使用这些模块。



require()会异步加载A,B,C三个模块，浏览器不会失去响应；它指定的回调函数，只有前面的模块都加载成功后，

才会运行，解决了依赖性的问题。



require.js会先加载jQuery，然后再运行回调函数。main.js的代码就写在回调函数中。

注意：require中的依赖是一个数组，即使只有一个依赖，你也必须使用数组来定义。

 4.加载文件



main.js的依赖模块是['jquery']。默认情况下，require.js会假定这个模块与main.js在同一个目录，

文件名是 jquery.js，然后自动加载，除此之外，我们可以通过require.config()方法，

我们可以对模块的加载行为进行自定义，require.config()就写在main.js的头部
，它的参数是一个对象，这个对象的paths属性指定各个模块的加载路径。